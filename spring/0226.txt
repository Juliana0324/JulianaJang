<!-- 서블릿을 최신버전으로 업데이트 -->
		<dependency>
			<groupId>javax.servlet</groupId>
			<artifactId>javax.servlet-api</artifactId>
			<version>3.1.0</version>
			<scope>provided</scope>

 <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-compiler-plugin</artifactId>
                <version>3.5.1</version>
                <configuration>
                    <source>1.8</source>
                    <target>1.8</target>



#1. web.xml에서 의미
	
	<!-- mvc와 관련된 스프링 설정파일의 위치를 지정해주는 테그 -->
	<context-param>
		<param-name>contextConfigLocation</param-name>
		<param-value>/WEB-INF/spring/mvc-config.xml</param-value>
	</context-param>


<!-- dispatcher servlet설정 -->
	<servlet>
		<servlet-name>appServlet</servlet-name>
		<servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>
		<init-param>
			<param-name>contextConfigLocation</param-name>
			<param-value>/WEB-INF/spring/appServlet/servlet-context.xml</param-value>
		</init-param>
		<load-on-startup>1</load-on-startup>
	</servlet>
		


# 2. servlet-context.xml

<!-- 아노테이션 쓰기위한 자동빈주입 -->
<annotation-driven />

	<!-- Handles HTTP GET requests for /resources/** by efficiently serving up static resources in the ${webappRoot}/resources directory -->
	
	
	<!-- 정적자원(html, css, javascript)를 절대경로로 쉽게 매핑하는 테그 -->
	<resources mapping="/resources/**" location="/resources/" />

	<!-- Resolves views selected for rendering by @Controllers to .jsp resources in the /WEB-INF/views directory -->
	<!-- view resolver 빈 등록 -->
	<beans:bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
		<beans:property name="prefix" value="/WEB-INF/views/" />
		<beans:property name="suffix" value=".jsp" />
	</beans:bean>
	
	
	<!-- 아노테이션을 사용하여 자동으로 빈 등록을 하게 해주는 설정테그 -->
	<context:component-scan base-package="com.spring.web" />
	


web.xml에서 한글인코딩
	<!-- 한글 인코딩 필터 설정(톰캣 내부의 한글처리) -->
	<filter>
	    <filter-name>encodingFilter</filter-name>
	    <filter-class>
				org.springframework.web.filter.CharacterEncodingFilter
			</filter-class>
	    <init-param>
	      <param-name>encoding</param-name>
	      <param-value>UTF-8</param-value>
	    </init-param>
	    <init-param>
	      <param-name>forceEncoding</param-name>
	      <param-value>true</param-value>
	    </init-param>
    </filter>
    <!-- 위에 지정한  encodingFilter이름을 모든 패턴에 적용-->
    <filter-mapping>
	    <filter-name>encodingFilter</filter-name>
	    <url-pattern>/*</url-pattern>
    </filter-mapping>






Model객체 사용하기
	//1. Model객체를 활용하여 화면에 데이터 전송하기
	/*
	 @GetMapping("/test")
	public void test(@RequestParam("age") int age, Model model) {
		model.addAttribute("nick", "뽀삐");
		model.addAttribute("age", age);
	}
	*/
	
	//2. @ModelAttribute를 사용한 화면의 데이터 전송처리
	@GetMapping("/test")
	public void test(@ModelAttribute("age") int age, Model model) {
		model.addAttribute("nick", "뽀삐");
		//model.addAttribute("age", age);
	}
	
	//3. ModelAndView객체를 활용한 처리
	@GetMapping("/test2")
	public ModelAndView test2() {
		
//		ModelAndView mv = new ModelAndView();
//		mv.addObject("userName", "박영희");
//		mv.setViewName("/response/test2");
//		return mv;
		
		//사용법2
		return new ModelAndView("/response/test2", "userName", "박영희");
	}
}

