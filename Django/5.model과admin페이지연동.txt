어드민 사용하기
https://docs.djangoproject.com/ko/3.2/intro/tutorial02/#make-the-poll-app-modifiable-in-the-admin
admin에 polls등록과정 거치기==> admin에서 자유롭게 접근가능
등록위해서는 admin.py에 polls에 해당하는 모델 작성

admin.py
from django.contrib import admin
# 창고 저장하기
from .models import Question

admin.site.register(Question)

웹에서
http://127.0.0.1:8000/admin/polls/question/add/
기록됨

Add question할때 
Date publish는 원래 pub_date인데 date publish로 models.py에서
변경해 놓았기 때문에
date publish로 출력됨

=======================================
어드민에 등록하기위한 __str__함수
admin에 보여질 정보를 models에 있는 것으로 저장하는 방법:
**반드시 __str__()함수  사용

model.py로 이동
class Question(models.Model):
    pub_date = models.DateTimeField('date published')
    
밑에 요거추가!=> admin페이지에서 question_text로 제목바꾸기
    def __str__(self):
        return self.question_text


혹은
    def __str__(self):
        return self.pub_date
    #업로드한 시간을 올려라
======================================
url작동원리
url 우아한 url패턴
<int:이부분을 지정할url명칭>

사용방법
djangoq의 urls.py에 
urlpatterns = [
     path("getbmi", views.getbmi),
     path("exchange", views.exchange),
     path("<int:test>", views.elegant),
    ]


djangoq의 view에 추가
#request옆에 test값 주기 
def elegant(request, test): 
    print(test) ==> test값인 999가 콘솔에 나온다
    return HttpResponse("<h1>우아한  URL 테스트</h1>")


http://127.0.0.1:8000/djangoq/999
입력시 999==> <int:test>에서 test값
==> test에서 number로 변경해도 무방함


#두개이상 넣고싶다면 /(슬래시)로 나눠주기
     path("<int:number>/<int:number2>", views.elegant),

views.py에 number2 추가해주기
def elegant(request, number, number2): 
    print(number)
    return HttpResponse("<h1>우아한  URL 테스트</h1>")

#2. 문자열로 받을때 str로 바꾸기
path("<str:number>/<int:number2>", views.elegant),


문제1. 환전을 우아한 url사용해서 등록하기
urls.py에
    path("exchange/<int:won>", views.exchange),

def exchange(request, won):
    #won = request.GET.get('won')
    #우아한 url사용시 won값 일일이 적어줄 필요 없기 때문에
    rate= 1120
    result = float(won) /rate
    text = "원화 "+str(won)+"달러로 환전 시 "+str(round(result,3))
    return HttpResponse(text)
    
!! 1차 url과 2차 url 구분 꼭 해줘야함!!
http://127.0.0.1:8000/djangoq/exchange/100000

문제2. getbmi도 우아한 url사용
def getbmi(request, cm, kg):
    #cm  = float(request.GET.get('cm'))
    #kg = float(request.GET.get('kg'))
    m = cm/100
    bmi = kg / (m ** 2)
    text="<h1>당신의  bmi는 "+ str(round(bmi,3))+ "입니다.</h1>"
    return HttpResponse(text)

views.py
urlpatterns = [
     path("getbmi/<int:cm>/<int:kg>", views.getbmi),
     path("exchange/<int:won>", views.exchange),
     path("<str:number>/<int:number2>", views.elegant),
    ]

http://127.0.0.1:8000/djangoq/getbmi/161/50


urlpatterns = [
	# 스트링으로 받기도 가능
     path("getbmi/<str:cm>/<str:kg>", views.getbmi),
    ]

#대신 float로 강제 형변환
def getbmi(request, cm, kg):
    m = float(cm)/100
    bmi = float(kg) / (m ** 2)
    text="<h1>당신의  bmi는 "+ str(round(bmi,3))+ "입니다.</h1>"
    return HttpResponse(text)

문제2.
1차 url패턴 => djangoq/
2차 url패턴 => <온도>/<온도 종류>
로 만들어 온도를 입력하고 
온도 종류에 f를 적으면 섭씨를 화씨로
온도 종류에 c를 적으면 화씨를 섭씨로 출력
만약 f,c가 아닌 다른 알파벳 입력시 
"온도 표기법을 정확하게 선택해주세요" 라고 화면 출력

urlpatterns = [
     path("getbmi/<int:cm>/<int:kg>", views.getbmi),
     path("exchange/<int:won>", views.exchange),
     path("<str:number>/<int:number2>", views.elegant),
     path("tconv/<str:t>/<str:m>", views.tconv),
    ]

def tconv(request, t, m):
    tmp = float(t)
    
    if(m=="c"):
        cel = (tmp-32) / 1.8
        text="<h1>화씨 "+str(t)+"도는 섭씨로 "+str(cel)+"도 입니다</h1>" 
    elif(m=="f"):
        feh= (tmp*1.8)+32
        text="<h1>섭씨 "+str(t)+"도는 화씨로 "+str(feh)+"도 입니다</h1>"
    else: 
        text="<h1>온도 표기법을 정확히 해주세요</h1>"  
    
    return HttpResponse(text)

============================================
2. URL템플릿 활용하기
urls.py내부에는 url패턴을 작성할 수 있었습니다.
거기에 더해 name이라는 파라미터에 이름을 부여할 수 있었는데 이는 나중에 링크 주소등을 나타낼때 유용하게 사용

3. app_name 추가하기
