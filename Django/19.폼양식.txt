장고걸즈 링크 : https://tutorial.djangogirls.org/ko/django_forms/
폼 저장하기
blog/views.py를 다시 여세요. 
지금 여러분이 보고 있는 post_new뷰는 아래와 같을 거에요.

blog/views.py
def post_new(request):
    form = PostForm()
    return render(request, 'blog/post_edit.html', {'form': form})
폼을 제출할 때, 같은 뷰를 불러옵니다. 
이때 request에는 우리가 입력했던 데이터들을 가지고 있는데, 
request.POST가 이 데이터를 가지고 있습니다. 
(POST는 글 데이터를 "등록하는(posting)"하는 것을 의미합니다. 
블로그 "글"을 의미하는 "post"와 관련이 없어요) 
HTML에서 <form>정의에 method="POST"라는 속성이 있던 것이 기억나나요? 이렇게 POST로 넘겨진 폼 필드의 값들은 이제 request.POST에 저장됩니다. POST로 된 값을 다른 거로 바꾸면 안 돼요. method 속성의 값으로 넣을 수 있는 유효한 값 중에 GET같은 것도 있지만, post와 어떤 차이점이 있는지 등에 대해서 다루기에는 너무 길어질 것 같아 생략할게요)

이제 view 에서 두 상황으로 나누어 처리해볼게요.

첫 번째: 처음 페이지에 접속했을 때입니다. 
당연히 우리가 새 글을 쓸 수 있게 폼이 비어있어야겠죠.

두 번째: 폼에 입력된 데이터를 view 페이지로 가지고 올 때입니다. 
여기서 조건문을 추가시켜야 해요. (if를 사용하세요)
blog/views.py
if request.method == "POST":
    [...]
else:
    form = PostForm()
이제 생략된 [...]부분에 코드를 추가해봅시다. 만약 method가 POST라면, 폼에서 받은 데이터를 PostForm으로 넘겨줘야겠죠? 이렇게 작성하면 됩니다.

blog/views.py
form = PostForm(request.POST)
참 쉽죠! 다음에는 폼에 들어있는 값들이 올바른지를 확인해야합니다.(모든 필드에는 값이 있어야하고 잘못된 값이 있다면 저장하면 되지 않아야해요) 이를 위해 form.is_valid()을 사용할거에요.

폼에 입력된 값이 올바른지 확인한 다음, 저장되는거죠!

blog/views.py
if form.is_valid():
    post = form.save(commit=False)
    post.author = request.user
    post.published_date = timezone.now()
    post.save()
일반적으로 이 작업을 두 단계로 나눌 수 있어요. 
form.save()로 폼을 저장하는 작업과 작성자를 추가하는 작업입니다. 
(PostForm에는 작성자(author) 필드가 없지만, 필드 값이 필요하죠!) 
commit=False란 넘겨진 데이터를 바로 Post 모델에 저장하지는 말라는 뜻입니다. 
왜냐하면, 작성자를 추가한 다음 저장해야 하니까요. 
대부분의 경우에는 commit=False를 쓰지 않고 
바로 form.save()를 사용해서 저장해요. 
다만 여기서는 작성자 정보를 추가하고 저장해야 하므로 commit=False를 사용하는 거예요. 
post.save()는 변경사항(작성자 정보를 포함)을 유지할 것이고 새 블로그 글이 만들어질 거에요!

끝으로, 새 블로그 글을 작성한 다음에 post_detail페이지로 이동할 수 있으면 좋겠죠? 
이 작업을 하려면 한 가지를 더 불러와야 해요.

from django.shortcuts import redirect
위 코드를 여러분의 파일 맨 위에 추가하세요. 그리고 새로 작성한 글을 볼 수 있도록 post_detail페이지로 가라고 수정합시다.

blog/views.py
return redirect('post_detail', pk=post.pk)

post_detail은 우리가 이동해야 할 뷰의 이름이에요
post_detail 뷰 는 pk변수가 필요한 거 기억하고 있겠죠? 
pk=post.pk를 사용해서 뷰에게 값을 넘겨줄 거에요. 
여기서 post는 새로 생성한 블로그 글이에요.

잘했어요. 너무 설명이 길어졌네요. 이제 view 전체 코드를 확인할게요.

blog/views.py
def post_new(request):
    #request는 사용자의 요청, method는 요청방식
    # GET방식으로 들어온 요청인지 PIST로 들어오는 방식인지 검사    
    if request.method == "POST":
        form = PostForm(request.POST)

        # .is_valid()는 form을 통해 넘어온 자료가 유효한자료인가
        if form.is_valid():
                # 우선 form에서 입력한 title, text정보를 넘ㅁ겨받고
	  #(pk, create_date관련 정보는 자동입력)
            post = form.save(commit=False)
            post.author = request.user
            post.published_date = timezone.now()
	#6개 칼럼에 대한 정보 완전히 입력후 DB반영
            post.save()
	#글  다썻으면 detail페이지 쓴글확인
            return redirect('post_detail', pk=post.pk)
    else:
        form = PostForm()
    return render(request, 'blog/post_edit.html', {'form': form})
잘 작동하는지 확인해보세요. 
http://127.0.0.1:8000/admin==> 들어가서 로그인하셔야해요
http://127.0.0.1:8000/post/new/ 페이지로 접속해서
 title과 text를 입력하고, 저장하세요…. 그리고…. 짜잔!!! 
새로운 블로그 글이 추가되고 post_detail페이지가 나타났어요!

블로그 글을 저장하기 전에 게시일을 설정하고 싶을 거에요. 추후 장고걸스 튜토리얼 중 게시글 추가하기 버튼 만들기에서 확인할 수 있어요.

모두 잘해냈어요!

장고 관리자 인터페이스처럼 로그인된 상태라고 생각해봅시다. 하지만 사용자가 로그아웃되는 상황이 발생하기도 하죠. (브라우저가 닫히거나, DB가 재시작된다든가 등) 만약 로그인되지 않은 상태에서 새 글을 저장한다면, 사용자가 로그인되어있지 않아 누가 글을 작성하였는지 알 수 없어요. 그래서 글을 저장할 때 오류가 발생하고, 로그인시키도록 http://127.0.0.1:8000/admin 관리자 페이지가 나타나게 될 거에요. 이 문제는 금방 해결할 수 있어요. 튜토리얼을 마친 후 장고걸스 심화 튜토리얼 - 보안 추가하기 장에서 실습할 수 있어요.

Logged in error
==========================================================
폼 검증하기
장고 폼이 얼마나 멋진지 알아볼 차례에요. 블로그 글은 title과 text필드가 반드시 있어야 해요. 우리가 만든 Post모델에서는 이 필드 값들이 필요 없다고 했지만(published_date는 제외하고) 장고는 모두 기본값으로 설정되어 있다고 생각합니다.

title과 text없이 폼을 저장해보세요. 어떻게 될지 생각해보세요!

Form validation

장고는 모든 필드의 값이 올바른지 검증할 수 있답니다. 정말 멋지죠?
=================================================================
폼 수정하기
지금까지 새 폼을 추가하는 방법에 대해 배웠어요. 하지만 이미 있던 글을 수정하려면 어떻게 해야 할까요? 이것도 앞서 했던 것과 매우 비슷해요. 빨리해보도록 합시다! (만약 이해하지 못하는 부분이 있다면, 여러분의 코치에게 이전 장의 내용에 관해서 물어보고 차례대로 하나씩 해결해 나가야 합니다)

blog/templates/blog/post_detail.html파일을 열어 아래 내용을 추가하세요.

blog/templates/blog/post_detail.html
<a class="btn btn-default" href="{% url 'post_edit' pk=post.pk %}"><span class="glyphicon glyphicon-pencil"></span></a>
이제 템플릿이 아래와 같이 보일 거에요.

blog/templates/blog/post_detail.html
{% extends 'blog/base.html' %}

{% block content %}
    <div class="post">
        {% if post.published_date %}
            <div class="date">
                {{ post.published_date }}
            </div>
        {% endif %}
        <a class="btn btn-default" href="{% url 'post_edit' pk=post.pk %}"><span class="glyphicon glyphicon-pencil"></span></a>
        <h1>{{ post.title }}</h1>
        <p>{{ post.text|linebreaksbr }}</p>
    </div>
{% endblock %}
blog/urls.py에 다음 코드를 추가합니다.

blog/urls.py
    path('post/<int:pk>/edit/', views.post_edit, name='post_edit'),
우리는 blog/templates/blog/post_edit.html 템플릿을 재사용할 거에요. 마지막으로 할 일은 view 를 만드는 것입니다.

blog/views.py파일을 열어서 파일 맨 밑에 코드를 추가해봅시다.

blog/views.py
def post_edit(request,pk): 
    # 글을 수정해야하기 떄문에 기존에 입력되어 있는 자료를 가져오는게 먼저임
    post = get_object_or_404(Post, pk=pk)    
    # get 방식 post방식 구분
    if request.method == "POST":
        # post방식인 경우는 기존 자료 post에 새로들어온 정보를 덮어 씌움
        form = PostForm(request.POST, instance = post)
        if form.is_valid():
            post = form.save(commit=False)
            post.author = request.user
            post.published_date = timezone.now()
            # published_date를 다시 현재 서버시간으로 변경
            post.save()
            return redirect('post_detail', pk=post.pk)
    else:
        #만약 post방식이 아닌 경우라면 get방식임으로 수정직전임
        # 따라서 폼으로 다시 연결해줘야함, 이때의 폼은 수정용 폼이고 
        # 수정용 폼에는 기존에 써놨던 글이 먼저 입력되어 있어야함으로
        # 감안해서 기존 글의 내용이 담겨있는 post를 촘에 instance로 넘겨줌
        form = PostForm(instance=post)
        return render(request, 'blog/post_edit.html',{'form':form})
음…. 코드가 post_new와 거의 비슷해 보이지 않나요? 하지만 완전히 같지는 않아요.

첫 번째: url로부터 추가로 pk 매개변수를 받아서 처리합니다.
두 번째: get_object_or_404(Post, pk=pk)를 호출하여 수정하고자 하는 글의 Post 모델 인스턴스(instance)로 가져옵니다. (pk로 원하는 글을 찾습니다) 이렇게 가져온 데이터를 폼을 만들 때와(글을 수정할 때 폼에 이전에 입력했던 데이터가 있어야 하겠죠?) 폼을 저장할 때 사용하게 됩니다.
blog/views.py
form = PostForm(request.POST, instance=post)
그리고 폼에 아래와 같이 수정하세요.

blog/views.py
form = PostForm(instance=post)
잘했어요. 이제 잘 작동하는지 확인해보세요! post_detail페이지로 가보세요. 우측 상단에 수정 버튼이 있어야 합니다.
==============================================================
Edit button

수정 버튼을 누르면 우리가 쓴 블로그 글이 들어가 있는 폼을 볼 수 있을 거에요.

Edit form

자유롭게 제목과 텍스트를 수정하고 저장해보세요!

축하합니다! 여러분의 어플리케이션이 점점 더 완벽해지고 있어요!

장고 폼에 대해 자세한 정보가 필요하다면 공식 문서를 읽어보세요. : https://docs.djangoproject.com/en/2.0/topics/forms/

보안
링크를 클릭해 새로운 포스트가 나오게 만드는 것은 멋진 일이에요! 지금은 웹사이트를 방문하는 누구든지 글을 쓸 수 있지만, 그렇게 하고 싶지 않을 수 있어요. 나에게만 보이고 다른 사람에게는 보이지 않는 버튼을 만들어 볼게요.

blog/templates/blog/base.html 파일에서, page-header div를 찾아 아래와 같이 작성된 앵커 태그(Anchor Tag)를 찾습니다.

blog/templates/blog/base.html
<a href="{% url 'post_new' %}" class="top-menu"><span class="glyphicon glyphicon-plus"></span></a>
여기에 {% if %}태그를 추가해 관리자로 로그인한 유저들만 링크가 보일 수 있게 만들 거에요. 그게, 바로 여러분이죠! <a>태그를 아래와 같이 변경하세요.

blog/templates/blog/base.html
{% if user.is_authenticated %}
    <a href="{% url 'post_new' %}" class="top-menu"><span class="glyphicon glyphicon-plus"></span></a>
{% endif %}
이 {% if %}는 브라우저에 페이지를 요청 하는 사용자가 
로그인 하는 경우 링크가 발생됩니다. 
이는 새 게시글을 완전히 보호해주는 것은 아니지만, 바람직한 방법입니다. 
이 부분은 장고걸스 심화 튜토리얼에서 좀더 자세히 다룰거에요.

세부 페이지에 있는 수정 아이콘이 기억나죠? 이번에도 동일하게 다른 사람들이 게시글을 수정하지 못하게 할 거에요.

blog/templates/blog/post_detail.html파일을 열어 아래와 같이 작성된 라인을 찾아주세요.

<a class="btn btn-default" href="{% url 'post_edit' pk=post.pk %}"><span class="glyphicon glyphicon-pencil"></span></a>
이렇게 바꾸세요.

blog/templates/blog/post_detail.html
{% if user.is_authenticated %}
     <a class="btn btn-default" href="{% url 'post_edit' pk=post.pk %}"><span class="glyphicon glyphicon-pencil"></span></a>
{% endif %}
로그인했기 때문에, 페이지 새로고침을 해도 아무것도 표시되지 않을 거에요. 
새로운 브라우저 또는 시크릿 창을 실행해 보세요. 링크와 아이콘이 보이지 않게 되었어요!

