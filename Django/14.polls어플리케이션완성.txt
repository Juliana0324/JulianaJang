redirect 강제로 넘어보냄.

    else:
        selected_choice.votes += 1
        selected_choice.choice_text = '.save()테스트'
        selected_choice.save()
        return HttpResponseRedirect("http://www.naver.com")
    강제로 naver.com으로 옮겨가기


=========================================
https://docs.djangoproject.com/ko/3.2/intro/tutorial04/

from django.urls.base import reverse

def vote(request, question_id):
    #질문이 들어온다
    question = get_object_or_404(Question, pk= question_id)
    try:
        selected_choice = question.choice_set.get(
            pk=request.POST['choice'])
    except (KeyError, Choice.DoesNotExist):
        return render(request, 'polls/detail.html',{'question':question})
    
    else:
        selected_choice.votes += 1
#        selected_choice.choice_text='.save()테스트'
        selected_choice.save()
        return HttpResponseRedirect(reverse('result', args=[question_id], ))

 reverse() 함수를 사용하고 있습니다. 이 함수는 뷰 함수에서 URL을 하드코딩하지 않도록 도와줍니다. 
제어를 전달하기 원하는 뷰의 이름을, URL패턴의 변수부분을 조합해서 해당 뷰를 가리킵니다. 
여기서 우리는 튜토리얼 3장에서 설정했던 URLconf를 사용하였으며, 
이 reverse() 호출은 아래와 같은 문자열을 반환할 것입니다.

def results변경

def results(request, question_id):
    question = get_object_or_404(Question, pk=question_id)
    return render(request, 'polls/result.html', {'question': question})

====================================
polls/result.html작성
<h1>{{ question.question_text }}</h1>

<ul>
{% for choice in question.choice_set.all %}
    <li>{{ choice.choice_text }} -- {{ choice.votes }} vote{{ choice.votes|pluralize }}</li>
{% endfor %}
</ul>

<a href="{% url 'polls:detail' question.id %}">Vote again?</a>


=>vote{{ choice.votes|pluralize }
단수일때 vote/ 복수일때 votes라는 뜻

==========================================
출력결과 http://127.0.0.1:8000/polls/2/results/
My Second Question
reading -- 0 votes
music -- 1 vote
movie -- 1 vote
Vote again?

===============================================


관리자 form커스터마이징
1. 먼저 폼을 바꾸기 위해서는 프로젝트 내부의 admin.py에서 
작성
class 커스터마이징 모델 (admin.ModelAdmin):
	# admin.ModelAdmin은 고정
    fieldsets = [
        ('카테고리명', {'fields': ['칼럼명']}),
        ('카테고리명 2(없을시 None)', {'fields':['칼럼명2']})
        ]
# admin페이지의 폼양식을 수정하고 싶다면 admin.py에서 새롭게 클래스를 선언한다
# 문법은 class 클래스이름(admin.ModelAdmin):
#     fieldset=[ ] 이며, fieldsets내부에는 각 칼럼별 특성을 적는다

예시)
class QuestionAdmin(admin.ModelAdmin):
    fieldsets = [
        (None, {'fields': ['question_text']}),
        ('Date information', {'fields':['pub_date']})
        ]


=====================================
question내부에서 수정할 수 잇도록
2. 추가모델은 
class 추가모델커스터마이징(admin.StackedInline):
	model = 모델명
	extra = 몇줄(정수)

예시 
class ChoiceInline(admin.StackedInline):
    model = Choice
    extra = 3
==========================
==> 
순서는 추가먼저: 
class ChoiceInline(admin.StackedInline):
    model = Choice
    extra = 3	(3이 기본값)

class QuestionAdmin(admin.ModelAdmin):
    fieldsets = [
        (None, {'fields': ['question_text']}),
        ('Date information', {'fields':['pub_date']})
        ]
    inlines = [ChoiceInline]

추가 옵션만들어주기
=============================================
https://tutorial.djangogirls.org/ko/
장고걸즈
blog프로젝트 시작

- pydeb django project - myblog 새로운 프로젝트 만들기
- settings.py에서 
	-서울로 바꾸기 : TIME_ZONE = 'Asia/Seoul'

	- STATIC_ROOT 추가해주기 :
	STATIC_URL = '/static/'
	STATIC_ROOT = os.path.join(BASE_DIR, 'static')

	-29번? 줄에 변경
	ALLOWED_HOSTS = ['127.0.0.1', '.pythonanywhere.com']

	- DB 확인
	DATABASES = {
 		   'default': {
        			'ENGINE': 'django.db.backends.sqlite3',
			        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),
 ..

- Migrate 해주기
	....
	  Applying sessions.0001_initial... OK


===================================================
블로그 글 모델 만들기

- 어플리케이션 만들기
우클릭- Create application - blog로 추가

- settings.py에도 blog링크 추가
INSTALLED_APPS = [
    'django.contrib.admin',
    ...
	'blog',    
]

- models.py에

from django.utils import timezone

class Post(models.Model):
    author = models.ForeignKey(
        'auth.User', on_delete=models.CASCADE)
    title = models.CharField(max_length = 200)
    text = models.TextField()
    created_date = models.DateTimeField(default=timezone.now)
    published_date = models.DateTimeField(blank=True, null = True)
    
    def publish(self):
        self.published_date = timezone.now()
        self.save 
    
    def __str__(self):
        return self.title

- make migration ==> blog해주고 
- migrate

Operations to perform:
  Apply all migrations: admin, auth, blog, contenttypes, sessions
Running migrations:
  Applying blog.0001_initial... OK

콘솔에 출력되면 완료