# 튜플(tuple)
# : 리스트와 비슷한 자료형으로 튜플안에 다양한 형태의 값을 저장할 수 있음

# 형식:
# 튜플변수명=(val1,val2,val3,...) 

# 리스트 vs 튜플 
#  1.리스트는 []를 사용하여 정의 하지만, 튜플은 ()를 사용
#  2.**리스트는 그값을 생성, 삭제, 수정이 가능하지만 튜플은 변경 x
#  3. 튜플은 멤버(요소)의 값이 1개인경우 반드시(*)뒤에,','를 붙여야함
#   예]   tu=(1,3,4,...)
#  4. 튜플은 가장 외각에 있는 '()'는 생략이 가능
#   예] tu = 10,20,30,(1,2)    # 외각() 생략

# 튜플의 인덱싱
# : 튜플도 리스트와 같이 인덱싱을 통해 값에 접근
# 
# 예] 
# 인덱스 값(+)  0  1  2  3  4  5  6  7  8  9
# 인덱스 값(-) -10 -9 -8 -7 -6 -5 -4 -3 -2 -1
#   튜플       (1, 2, 3, 4, 5, 6, 7, 8, 9, 10)
# 
# 튜플의 슬라이싱(slicing)
# :튜플의 특정 범위의 값에 접근하기 위한 방법으로 리스트와 동일하게 사용
'''
# 예제1] 튜플의 정의 밑 사용
tu = (1,2,3,4,5)
print(tu,type(tu))      #(1,2,3,4,5) <class,'tuple'>
print(tu[0])            #1
print(tu[1])            #2
print(tu[-1])           #5
print(tu[0:3])          #(1,2,3)
print(tu[3:])           #(4,5)

tu1 = '문자열', 100,123.456
print(tu1,type(tu1))       #('문자열', 100,123.456) <class 'tuple'>
tu2 = (10)
print(tu2,type(tu2))        # 10, class 'int' why? ,가 없어서 int로 출력

tu3 = (10,)
print(tu3,type(tu3))        # 10, class 'tuple'

tu4 = 10,
print(tu4,type(tu4))        # 10, class 'tuple'

# 예제2] tuple의 특성
tu = (1,2,3,4,5)
tu[0]=100
print(tu)
#TypeError 튜플은 멤버변경x


#예제3] 튜플의 결합1(병합)
a = 1,2,3
b = 4,5,6
c= a+b
print(c,type(c))        #(1,2,3,4,5,6) <class 'tuple'>

# 예제4] 튜플의 결합2(확장)
tu1= 10,20,30
tu2=40,50,60
tu1+= tu2
print(tu1,type(tu1))        #(10,20,30,40,50,60) <class 'tuple'>

# 튜플을 리스트로 변경
lst = list(tu1)
print(tu1)
print(lst)          #수정과 변경 가능

# 리스트를 튜플로
tu = tuple(lst)
print(tu)

# packing / unpacking
#   : 튜플을 하나의 튜플로 묶어서 사용하는 것을 'packing',
#   : 반대로 묶여진 튜플의 멤버로 나눠서 사용하는것을 'unpacking'이라고 한다

#  packing 
tup1 = (1,2),(3,4)      #(1,2),(3,4)값을 하나의 튜플로 만듬 ==> packing
print(tup1)             # ((1,2),(3,4))
print(tup1[0])          # (1,2)
print(tup1[1])          # (3,4)

# unpacking
x,y = tup1      #x,y= (1,2),(3,4)
print(x)        #(1,2)    
print(y)        #(3,4)

# 예제5] packing and unpacking
pack=1,2,'패킹'     #packing
a,b,c=pack          #unpacking
print(pack)         #(1,2,'패킹')
print(a)        # 1
print(b)        # 2
print(c)        # '패킹'

#튜플의 함수   
#  : 튜플의 경우 요소값을 변경할수 없기 떄문에 리스트에 다음함수만 사용

# -index(val): 튜플에 있는 해당멤버으 인덱스 값 반환
# -count(val): 튜플에 있는 값의 개수를 반환
# 예제6]

tu =(100,200,'함수',100,'개수')
print(tu.index(200))        #1
print(tu.count(100))        #2


# [ Tuple 종합 문제 ]
1. 여러 개의 값을 패킹시킨 후 저장되어 있는 값을 빼내어 
  출력 하시오. (5개 값 저장)
( Tuple의 값을 리스트에 저장하시오. 단, Len함수를 이용)

2.아래와 같이 출력 시키시오
----------------------------------------------------
     (Tuple)          (List)
    회사정보     :   삼성전자
    제품명       :    Galaxy
    가격정보     :    100원
    출시일       :    미정
----------------------------------------------------

3. 위에서 출력 한 내용을 업데이트 하시오. 
[ 단, Index, Insert, Remove 함수를 전부 사용할 것 ]
가 격 : 100 -> 110
출시일 : 미정 -> 이번 달 말
'''
#1. 여러 개의 값을 패킹시킨 후 저장되어 있는 값을 빼내어 출력 하시오. (5개 값 저장)
tu1 = 10,20,30,40,50
a,b,c,d,e=tu1
print(tu1)

#선생님 풀이
tu = '20-04-07',1129,'파이썬',29.30,3.14
lst=[]
for i in range(len(tu)):        #튜플값을 리스트 저장
    lst.append(tu[i])
print(lst)                      #리스트 출력


#2.
''' 
print('-'*50)
tu2= '회사정보', '제품명','가격정보','출시일'
lst=['삼성전자','Galaxy','100원','미정']
print('{:^15}:{:^15}'.format(tu2[0],lst[0]))
print('{:^15}:{:^15}'.format(tu2[1],lst[1]))
print('{:^15}:{:^15}'.format(tu2[2],lst[2]))
print('{:^15}:{:^15}'.format(tu2[3],lst[3]))
print('-'*50)
print('\n')
'''
#선생님 풀이 
tu2= '회사정보', '제품명','가격정보','출시일'
lst=['삼성전자','Galaxy','100원','미정']
for x in range(len(tu2)):
    print('{:^15}:{:^15}'.format(tu2[x],lst[x]))
print('-'*50)
print('\n')


#3.
print('-'*50)
lst.remove(lst[2])
lst.insert(2,'110원')
lst.remove(lst[3])
lst.insert(3,'이번달 말')
for x in range(len(tu2)):
    print('{:^15}:{:^15}'.format(tu2[x],lst[x]))
print('-'*50)
print('\n')

#3 선생님 풀이
tu3= '회사정보', '제품명','가격정보','출시일'
lst1=['삼성전자','Galaxy','100원','미정']
idx1= lst1.index('100원')
idx2= lst1.index('미정')
lst1.remove('100원')
lst1.remove('미정')
lst1.insert(idx1,'110원')
lst1.insert(idx2,'이번달 말')
for i in range(len(tu3)):
    print('{:^15}:{:^15}'.format(tu3[i],lst1[i]))

# dictionary(dic)
# 1. list 와비슷한 자료형, list는 멤버값에 접근할때 첨자(index)를 사용
# 딕셔너리도 첨자를 이용하여 접그.사용하는 첨자는 'key'를 사용
#  2. 'key'가 가리키는 곳에 값(value=데이터)이 존재함

    # key값이용 장점
    # : 1. 빠른 탐색속도
    # : 2. 사용편리
#  3. dictionary 정의할떄는 '{}'를사용한다
# 4. 특정슬롯에 대한 참조할떄는 key-value를 입력하거나, Dictionary안에 있는 요소를 참조할때 '[]'를 사용
#
# (형식) 
# 변수명 = {} # 빈딕셔너리를 선언
# 변수명 = {key:value1, key2:value2, key3:value3...}
# 
# dict()를 이용한 경우
#  변수명 = dict([(k1,v1),(k2,v2),(k3,v3),...])
# 
# 접근방식
# dic = {key : value}
# dic[key] = value1
# print(dic[key])     ==> 출력결과는 'Value1'

# 예제1] 딕셔너리에 대한 정의 및 접근
dic = {'a':1, 'b':2,'c':3}
print(dic,type(dic))
print(dic['c'])     # ==> 3
dic['c'] = 5* dic['b']
print(dic['c'])    # ==> 10

