'''
# dictionary(dic)
# 1. list 와비슷한 자료형, list는 멤버값에 접근할때 첨자(index)를 사용
# 딕셔너리도 첨자를 이용하여 접그.사용하는 첨자는 'key'를 사용
#  2. 'key'가 가리키는 곳에 값(value=데이터)이 존재함

    # key값이용 장점
    # : 1. 빠른 탐색속도
    # : 2. 사용편리
# 3. dictionary 정의할떄는 '{}'를사용한다
# 4. 특정슬롯에 대한 참조할떄는 key-value를 입력하거나, Dictionary안에 있는 요소를 참조할때 '[]'를 사용
#
# (형식) 
# 변수명 = {} # 빈딕셔너리를 선언
# 변수명 = {key:value1, key2:value2, key3:value3...}
# 
# dict()를 이용한 경우
#  변수명 = dict([(k1,v1),(k2,v2),(k3,v3),...])
# 
# 접근방식
# dic = {key : value}
# dic[key] = value1
# print(dic[key])     ==> 출력결과는 'Value1'

# 예제1] 딕셔너리에 대한 정의 및 접근
dic = {'a':1, 'b':2,'c':3}
print(dic,type(dic))
print(dic['c'])     # ==> 3
dic['c'] = 5* dic['b']
print(dic['c'])    # ==> 10

# 예제2] 딕셔너리에 for 구문
dic = {'a':1, 'b':2,'c':3}
for k in dic:       
    print(k)        # dic의 key값 출력
    print(k,'=',dic[k]) #dic[k]를 이용

# 예제3] 딕셔너리와 리스트를 같이 사용하는 경우
dl={'음료':['탄산','우유','물','과일주스'],
    '식사':['김밥','라면','돈까스','비빔밥'],
}
for key in dl:
    print(dl[key])      #list값 출력
    for i in dl[key]:
        print(i,end=' ')
    print() 
    for j in range(len(dl[key])):
        print(dl[key][j], end=' ')

# 예제4] 리스트 안에 딕셔너리가 존재하는 경우
ld=[{'name':'김','age':25,'blood':'b'},
    {'name':'박','age':21,'blood':'a'}]

for dict in ld:
    print(dict['name'],dict['age'],dict['blood'])

# 예제5] 딕셔너리 안에 딕셔너리
dd= {'박씨':{'age':25,'blood':'B'},
    '김씨':{'age':21,'blood':'A'}}

for name in dd:             # key값
    print(name,dd[name]['age'],dd[name]['blood'])


# 딕셔너리에서 사용하는 함수들..
# -update(dict): 사전형 자료에 값을 추가
# -fromkeys(iter,value): iter 자료형(리스트,튜플)값을 딕셔너리에 key로 
                        # 사용하여 딕셔너리를 생성하여 반환
# - get(key[,value]): 사전형의 키값을 이용하여 value값을 반환
# - keys() : 모든 키 반환
# - values(): 사전형 자료에 모든 값 반환
# - items() : 사전형의 모든 '키(key):값(value)' 쌍을 *([튜플]- 변경이 안됨)로 반환
# - pop(key): 사전형의 키를 통해서 값을 반환한 후에 삭제하는 함수= 키값없으면 안됨 
#       btw리스트에서는 key값없으면 마지막멤버를 반환후 삭제
# -popitem() : 사전형 자료에 마지막 'key:value' 쌍을 튜플로 반환후 삭제
# -clear: 사전형의 모든 key:value값을 삭제하여 빈 사전형 자료를 만드는 함수

# -update()
dic ={'a':1, 'b':2,'c':3}
dic.update({'d':4})
print(dic['d'])         #4
print(dic['a'])         #1 
print(dic)              #'a':1, 'b':2,'c':3,'d':4


# -fromkeys(iter,value)
k = ['a','b','c','d']
dic1={}.fromkeys(k)
dic2={}.fromkeys(k,1)
print(dic1)
print(dic2)

# -get(key[,value])
dic ={'a':1, 'b':2,'c':3}
value=dic.get('b')
print(value)            #2
print(dic.get('d'))     # None - 멤버가 none 인지 없는건지알수없기때문에
print(dic.get('d','Not existing key'))   # 값이 없을시 Not existing key 출력
print(dic.get('c','Not existing key'))   # 3 출력

# keys()
dic ={'a':1, 'b':2,'c':3}
for key in dic.keys():          # dic.keys딕셔너리 함수 x!!!
    print(key,end=' ')
print()
test=dic.keys()
print(test)

# values()
dic={'a':1, 'b':2,'c':3}
for value in dic.values():
    print(value,end=" ")
print()
values= dic.values()
print(values,dic.values())

# items()    튜플로변경
dic=dict([('a',1),('b',2),('c',3)])
print(dic)
for key,value in dic.items():
    print('{}:{}'.format(key,value),end='\t')
print()
print(dic.items())

# pop(key)
dic={'a':1, 'b':2,'c':3}
value = dic.pop('b')        # value=2   ==> int
value = dic.pop()           #TypeError==>(key)값 지정해줘야함
print(value)
print(dic)                  # 'b':2 삭제

# popitem()
dic={'a':1, 'b':2,'c':3}
value2= dic.popitem()        # value2 ==> tuple
print(dic)
print(value2)

# clear()
print(dic)
dic.clear()
print(dic)
'''

