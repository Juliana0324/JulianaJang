# 연산자
# : 프로그램에서 특정한 계산(기능)을 위해서 사용하는 기호
# 
# (1) 산술 연산자
#  '+' : 두 피연산자의 더한 결과를 반환 
#  '-' : 두 피연산자의 빼기 결과를 반환 
#  '*' : 두 피연산자의 곱한 결과를 반환
#  '/' : 두 피연산자의 나누기 결과를 반환
#  '//' : 두 피연산자의 나눈 결과의 몫 반환
#  '%' : 두 피연산자의 나눈 결과의 나머지 반환
#  '**' : 좌측에 있는 피연산자를 우측의 피연산자의 값으로 거듭제곱
#        처리후 결과를 반환     

# 예제1] 3과 2를 가지고 위 연산식을 계산한 예시
print('{} + {} = {}'.format(3,2,3+2))       # 3 + 2 = 5
print('{} - {} = {}'.format(3,2,3-2))       # 3 - 2 = 1
print('{} * {} = {}'.format(3,2,3*2))       # 3 * 2 = 6
print('{} / {} = {}'.format(3,2,3/2))       # 3 / 2 = 1.5
print('{} // {} = {}'.format(3,2,3//2))     # 3 // 2 = 1
print('{} % {} = {}'.format(3,2,3%2))       # 3 % 2 = 1
print('{} ** {} = {}'.format(3,2,3**2))     # 3 ** 2 = 9

# (2) 비교 연산자
#  : 두 피연산자의 값을 비교하여 결과를 
#   "참(True)" 또는 "거짓(false)" 으로 반환하는 연산자
#  "==" : 두 피연산자의 값을 비교하여 동일하면 "참", 다르면 "거짓"
#  "!=" : 두 피연산자의 값을 비교하여 다르면 "참", 같으면 "거짓"
#  ">"  : 두 피연산자의 값을 비교하여 왼쪽이 크면 "참", 
#        그렇지 않은 경우는 "거짓"
#  "<"  : 두 피연산자의 값을 비교하여 오른쪽이 크면 "참",
#        그렇지 않은 경우는 "거짓" 
#  ">=" : 두 피연산자의 값을 비교하여 왼쪽이 크거나 같으면 "참",
#        그렇지 않은 경우는 "거짓"
#  "<=" : 두 피연산자의 값을 비교하여 오른쪽이 크거나 같으면 "참",
#        그렇지 않은 경우는 "거짓" 

print(3==2)     # 거짓(False)
print(3!=2)     # 참(True)
print(3>2)      # 참(True)
print(3<2)      # 거짓(False)
print(3>=2)     # 참(True)
print(3<=2)     # 거짓(False)

# (3) 논리연산자
# : 두 피연산자의 값(bool형)을 비교하여 "참" 또는 "거짓" 판별
#  "and" : 논리곱. 두 피연산자가 모두 "참 True"인 경우에 "참"을 반환
#         둘중에 하나라도 "거짓False "이면 "거짓"을 반환
#  "or"  : 논리합. 두 피연산자가 둘중 하나라도 "참"이면 "참"을 반환
#         둘다 "거짓"이면 "거짓"을 반환
#  "not" : 부정. 오른쪽 피연산자의 값이 "참"이면 "거짓"을, 
#         "거짓"이면 "참"을 반환하는 연산자 
# True = 1, False = 0
# AND : 논리곱
print((1==1) and (1==1))    # 참
print((1==1) and (1==0))    # 거짓
print((1==0) and (1==1))    # 거짓 *short cut 연산 : and연산은 부정을 우선함
print((1==0) and (1==0))    # 거짓

# OR : 논리합
print((1==1) or (1==1))     # 참
print((1==1) or (1==0))     # 참
print((1==0) or (1==1))     # 참
print((1==0) or (1==0))     # 거짓

# NOT : 부정
print(not(1==1))            # 거짓
print(not(1==0))            # 참

# 4. 멤버 연산자
# : 피연산자 내에 멤버의 존재에 대한 질의
# : 'in' : 왼쪽 피연산자가 오른쪽 멤버중에 포함이 되어 있다면 '참' 그렇지 않으면 '거짓'
# : 'not in': 왼쪽 피연산자가 오른쪽 멤버중에 포함이 되어 있지 않다면 '참' 그렇지 않고 포함되면 '거짓'

'''
# in
print(1 in (1,2,3))             # True
print(5 in [1,2,3])             # False

# not in
print(1 not in (1,2,3))             # False
print(5 not in [1,2,3])             # True

# 대소문자 구분하기 True/False

# 5. 식별연산자
# : 두개의 피연산자를 비교하여 객체(타입-형태)값이 동일한지 아닌지 구분하는 연산자
#  'is': 두 피연산자의 식별값을 비교, 동일하면 '참'아니면 '거짓'
# 'is not' : 두 피연산자의 식별값을 비교, 동일하지 않으면 '참' 동일하면 '거짓'

# is
print(type(1)is int)    #참
print(type(1)is str)    #거짓

# is not
print(type('1')is not int)      # 참
print(type('1')is not str)        #거짓
'''
# 6. 비트 연산자
#       2진수로 계산함
#  : 두 피연산자의 bit값을 가지고 연산하는 연산자들
# '&': 두 피연산자의 and bit 연산하는 연산자
#       10 & 6: 0000 1010       - 10
#             & 0000 0110       - 6
#      ====================
#               0000 0010   => 2

# '|' : 두피연산자의 or bit 연산하는 연산자
#       10 | 6: 0000 1010       - 10
#             | 0000 0110       - 6
#      ====================
#               0000 1110       => 14
# '~' : 우측의 피연산자에 대한 not bit 연산자
#       ~0 : 0000 0000  (0)
#       ================
#            1111 1111  (-1)            # 맨앞에 있는 1은 음수
#       1의 보수
# '^': 두 피연산자에 대한 XOR (배타적 논리합)
#               : 두개 모두 참이면 거짓
#       배타적 논리합은 : 두 피연산자 중에 하나라도 참이면 '참'
#               단, 두개 모두 '참' 혹은 '거짓'이면 거짓 
#       10 ^ 6: 0000 1010       - 10
#             ^ 0000 0110       - 6
#      ====================
#               0000 1100       -12
# '<<' : 왼쪽 피연산자의 비트를 오른쪽연산자의 값만큼 이동(왼쪽)
#       2 << 2: 0000 0010       - 2
#            << 0000 1000       - 8
# '>>' : 왼쪽 피연산자의 비트를 오른쪽연산자의 값만큼 이동(오른쪽)
#       2 >> 2 : 0000 1000      - 8
#              >> 0000 0010     - 2
print(10&6)
print(10|6)
print(10^6)
print(2<<2)
print(8>>2)

# 기타연산자 : 
# '=' : 대입연산자 
#        => 왼쪽에 있는 피연산자에게 오른쪽에 있는 피연산자를 대입(복사)
# 복합연산자 : 대입 연산자와 산술연산자의 결합
# 의미 : 왼쪽의 피연산자를 오른쪽 피연산자로 산술 연산한 후에 
# 왼쪽 피연산자에 저장
# '+=','-=', '*=', '/=', '//=',...

a = 0
a += 10
print(a)
# a+10 = 10, a= 10

a -= 5
print(a)
# a= 10 대입, a - 5 = 5, a=5 

a *= 5
print(a)
# a =5 대입, a * 5, a =25

a //= 5
print(a)
# a = 25 대입, a // 5, a = 5

a % 3
print(a)
# a =5 대입, a % 3, a = 2(나머지)
# 나머지 연산 : 배수관계 

a /= 2
print(a)
# a = 2 대입, a / 2 = 1.0 
