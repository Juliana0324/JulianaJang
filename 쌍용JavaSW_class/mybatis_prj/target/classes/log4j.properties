# LOG 레벨
# 로그를 출력하게 되는 시점 : 
# TRACE(쿼리가 실행만 되더라도 출력 > DEBUG > INFO > WARN > ERROR > FATAL(심각한 오류가 있을 때 출력)
# 로그 사용시 장점 : 프로그램과 에러출력 코드를 분리해서 작성할 수 있다.
# 코드가 간결해진다.
# 출력시점을 마음대로 변경할 수 있다.

# Global logging configuration
log4j.rootLogger=TRACE, stdout
# MyBatis logging configuration...
log4j.logger.org.mybatis.example.BlogMapper=TRACE
# Console output...
log4j.appender.stdout=org.apache.log4j.ConsoleAppender
log4j.appender.stdout.layout=org.apache.log4j.PatternLayout
log4j.appender.stdout.layout.ConversionPattern=%5p [%t] - %m%n

# Global logging configuration
log4j.rootLogger=TRACE, file,stdout
# MyBatis logging configuration...
#log4j.logger.org.mybatis.example.BlogMapper=TRACE
# Console output...
log4j.appender.stdout=org.apache.log4j.ConsoleAppender
log4j.appender.stdout.layout=org.apache.log4j.PatternLayout
log4j.appender.stdout.layout.ConversionPattern=%5p [%t] - %m%n

log4j.appender.file=org.apache.log4j.DailyRollingFileAppender
log4j.appender.file.File=E:/dev/mybatis.log 
log4j.appender.Threshold=DEBUG
log4j.appender.file.Append=true 
log4j.appender.file.DatePattern='.'yyyy-MM-dd'.log' 
log4j.appender.file.layout=org.apache.log4j.PatternLayout 
log4j.appender.file.layout.ConversionPattern=[%p], %d{yyyy-MM-dd HH:mm:ss}, %m %n 
log4j.appender.file.encoding=UTF-8
  