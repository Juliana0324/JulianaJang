python형식으로 진행했습니다.

#1
def list_count(x,l):
    c = l.count(x)
    print(c)

list_count('a',[1,'b','a',['c','a']])



#1-2
def list_countall(x,l):
    count = 0
    for elem in l:
        if type(elem) == list:
            count += list_countall(x,elem)
        else:
            if elem == x:
                count += 1
    return count

print list_countall('a',[1,'b','a',['c','a']])


#2
list_reverse=['a','b',['c','d'],'e']
rlist = list(map(lambda l:l, list_reverse))	
rlist.reverse()
print(rlist)

#2-2
twistList=list(map(lambda l:l, rlist[1]))
twistList.reverse()
rlist[1]=twistList
print(rlist)

# #3
def list_insert(a):
    l = len(a) 
    for i in range(1, n):
        key = a[i]
        j = i - 1
        while j >= 0 and a[j] > key: 
            a[j + 1] = a[j]
            j -= 1
            a[j + 1] = key 
            
arr = [4,3,2,6,8,5]
list_insert(arr)
print(arr)


#4
import itertools

      per = ['a', 'b', 'c']
list_per= list(map(''.join, itertools.permutations(per)))
print list_per

#4-1
def powerSet(arg):
    if len(arg) <1:
        yield seq
        yield []
    else:
        for item in powerset(seq[1:]):
            yield [seq[0]]+item
            yield item
            plist = ['a','b','c']
            r = [x for x in powerset(plist)]
            r.sort()
            print r
            

#4번문항 다른 방법            
from itertools import chain, combinations 
def powerset(arg):
    s = list(arg)
    return chain.from_iterable(combinations(s, r) for r in range(len(s) + 1))
 
print(list(powerset(['a','b','c'])))
    