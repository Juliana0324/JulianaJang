기본형 데이터 타입: 
boolean = True , False로
float, double : 소수점을 가지는 데이터
byte , short, int, long ; 정수

크기
byte : 1byte
short: 2byte
int : 4byte
long : 8byte

항상 0에서 부터 시작함으로 값이 1이 작음

float : 1.0 ==> 4byte		int 단위
double : 1.0 ==> 8byte	

# boolean : 
1 byte =>
 
# char : 
문자열 ==> Java에서만 2byte 


참조형 : - 사용자 정의형
- 약속되지 않은 데이터 타입
- 만들어 쓰는 데이터 타입

# 변수 : 데이터를 저장하기 위한 공간
1. 변수 선언 : 예약어 사용 x ,특수문자는 '_','$'만 사용
데이터 형 변수명;	int i;
2. 데이터형 변수를 ,(콤마)로 나열가능
int i,j,k;
3. 변수명은 띄어쓰기 안됨:
int student score; (x)
int studentScore; (o)
int student_Score; (o)

4. 변수명은 숫자 x 또는 예약어 x;
int 0student_score; (x)
int float;(x)

# 변수 초기화
 - 선언된 변수에 값을 대입
 - 변수명 = 값;

window - show view - package Explorer 


Java 상 .format ==> +로 표기
int num = 5;	/*num을 초기화*/		
System.out.println("num=" + num);	# num =5
	
num = 10;
System.out.println("num=" +num);	# num =10

num = num +10;					 	좌측 num (lvalue): 공간을 나타냄  
우측 num(rvalue): 값을 나타냄
System.out.println("num=" +num);	# num =20


# 데이터 타입
# boolean형 = 
- 기본적 1byte
- Java를 구성하는 최소 단위

예제1]
boolean bl=10>5;		
System.out.println("bl="+bl);	# true

예제2]
bl =false;
System.out.println("bl="+bl);	# false



0000 0000= 0~255
1 000 0000 = 1을 붙혀서 -(음수)
s 000 0000 = -127 ~ +127

***JVM은 피연산자를 4byte변환하여 연산한다

데이터 형변환:
데이터 타입 다를시: 
	큰쪽으로 형변환시켜서 사용

"" ==> 문자열
문자열은 1글자당 2byte로 정의 x: 데이터 타입 정의x
길이가 정의 되어 있지 않기 떄문에 문자열이 아마 제일 클것

... 사용자가 만든 문자열 타입
string ==> 참조형
문자열 사용시 string으로 ....

#정수 사용 예시

System.out.println(10);		//정수 임으로 ==> 자바에선 4byte로 
int num=10;
int num1 =num;
System.out.println("num=" + num);		//int
System.out.println("num1=" + num1);		//int
		
int num2=10,num3=3 ;
System.out.println("num2+num3=" +num2+num3);	//문자열로 인식하기 때문에  출력 시, 103
System.out.println("num2+num3=" +(num2+num3));	// 괄호로 먼저 연산 후 출력

# byte 사용예시
byte b =127;
//b = b+1; 	//바이트 상 가장 큰 값은 127까지밖에 안되기때문에  Error
System.out.println("b=" + ++b);
		
# short 사용예시
short s = 0x7fff; // = 0111 1111 1111 1111: short형에서의 가장 큰값
System.out.println("s=" + ++s);
		
int i = 0x7fffffff;
System.out.println("i=" + ++i);
		
long l = 0x7f ff ff ff ff ff ff ffL;		//long일때는 변수 끝에 L또는 l 붙여줌
System.out.println("l=" + ++l);
		
# 실수 사용예제
System.out.println(123.456);
double d = 123.456;
float f = 123.456f;		//더블형과 구분을 위하여 변수 뒤 f
System.out.println("d=" +d+"/f="+f);


int i =5;
int ii = 3;
System.out.println("i*ii/2=" + (i*ii/2));		//답 7 = int 형으로 가져오기 때문에

System.out.println(i*ii/2.0);		//실수값으로 가져오는 법 => 답:7.5
		

BCD 코드 
 00| 0000: 소문자 없음	(64개)

EBCD 코드
0000|0000

ASCII 코드
 000|0000 : 128개

parity bit + ASCII
110 0001		==> ASCII코드상 'A'

 - Even parity bit: 1의 개수가 짝수
 - Odd parity bit: 1의 개수가 홀수
데이터 사용자의 최소단위의 정보를 틀린지 맞는지 확인할 수 있음

유니코드(Uni code): 전세계의 언어를 표현가능

00000000  00000000   00000000  00000000
1byte	  2byte	      3byte	4byte
'A'= 00000000  00000000   00000000  0110 0001(97) 
'가'= 00000000  00000000   00100001  0110 0001

00100001  01100001 EUC-KR

CP-949 ; 한글을 위한 인코딩 방법 하지만 충분한 표현 안되기 때문에

***
utf-8	알파벳의 경우 불필요한 상위 3byte는 삭제
	한글의 경우 1byte 추가

- utf-16
- utf-24
- utf-32


문자열 예시]
char ch= 'A';	//하나의 문자 데이터 입력시 '' 두개이상의 문자열 입력시 ""
char code = '\u0041';		
//0100 0001 ASCII 코드  ==> 41 hex값의 ASCII 

System.out.println("ch="+ch);
System.out.println("code="+code);
		
char ch = '가';
System.out.println("ch="+ch);
System.out.println((int)ch);	#44032		
//사용자의 의지대로 앞에 (int)로 연산자 변경 ==> ASCII코드로 44032

97 = a
65 = A
48 = '0'		
32 = space

