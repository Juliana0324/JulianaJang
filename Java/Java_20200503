# 클래스와 객체
# 참조변수와 객체
new연산자 다음에 클래스명 (car)을 기술하면 실질적인 멤버 필드 값을 저장할 수 있는 기억공간이 생성됨
(이때 힙에서 생성)

# 참조변수의 역할
new에의해서 할댕 되는 기억 공간은 힙 영역인데 이곳은 실질적인 값을 저장할 수 있지만
힙영역은 직접 접근 안되서 참조변수 필요


#생성자의 정의
클래스로 부터 객체가 생성될때 초기화 과정을 기술하는 특수한 메소드

-객체 생성시 반드시 하나의 생성자 호출
- 생성자 없으면 자동으로 default 생성자 생김
- 생성자 오버로딩할수 있음 (==새로 상단에 만들수 있음 )
- 객체를 생성할때만 사용가능 (==> 특수의 경우)


#this 메소드
this뒤에 참조연산자 (.)을 붙여 멤버 접근가능
this(매개변수)를 하면 객체가 가지고 있는 생성자 호출
this()이용시 반드시 생성자의 첫번쨰 줄에 써야함


#예시
class Person{
  String name;
  int age;
  Person(){
  name = "홍길동"
  age =20;
  }
  Person(String name){
    name = name;      ====>> ** Error!!!!! 멤버필드와 변수명이 동일하기때문에
                    구별을 해야함으로 멤버필드에 this붙임
    age = 20;
  }
}

import java.io.IOException;
import java.util.Scanner;

class Room{
	boolean room[];
	Scanner sc;
	int roomsu;
	Room(int roomsu){
		room = new boolean[roomsu];
		//배열을 맨처음 선언 해주면 boolean 초기값은 false로 만들어진다.
		
		sc=new Scanner(System.in);
		this.roomsu=roomsu;
	}

public void input(){
	int roomNum;
	do {
	System.out.println("입실할 방의 번호:");
	roomNum=sc.nextInt();
	}
	while(roomNum<1||roomNum>roomsu);
	
	//if (roomNum<1 || roomNum>roomsu)input();
	if (room[roomNum-1]) {
		System.out.println(roomNum+"호실은 사용중입니다");
	}
	else {
		System.out.println(roomNum+"호실에 입실하였습니다.");
		room[roomNum-1]=true;			//true로 변경
	}
}
public void output(){ //input과 반대
	int roomNum;
	do {
	System.out.println("퇴실할 방의 번호:");
	roomNum=sc.nextInt();
	}
	while(roomNum<1||roomNum>roomsu);
	
	//if (roomNum<1 || roomNum>roomsu)input();
	if (room[roomNum-1]) {
		System.out.println(roomNum+"호실은 빈방입니다");
	}
	else {
		System.out.println(roomNum+"호실에서 퇴실하였습니다.");
		room[roomNum-1]=false;			
	}
	
}
public void view(){
	for (int i=0; i<roomsu; ++i) {
		if(room[i]) {
			System.out.println(i+1+"호실은 사용중입니다.");
		}
		else {
			System.out.println("빈방입니다");
		}
	}
}
public void exit(){
	System.out.println("프로그램을 종료합니다");
	System.exit(0);	// 프로그램을 영구히 종료합니다.
}
}
public class Main {

	public static void main(String[] args) throws IOException {
		Scanner sc = new Scanner(System.in);
		System.out.println("방의 개수를 입력하세요");
		int roomsu=sc.nextInt();
		Room room=new Room(roomsu);
		
		
		while(true) {
			System.out.println("1.입실\n2.퇴실3.방보기\n4.종료:");
			int select =System.in.read()-48;	//1, \r \n
			sc.nextLine(); //엔터키가 들어올때까지 입력을 받겠다
			switch(select) {
			case 1:
				room.input();break;
			case 2:
				room.output();break;
			case 3:
				room.view();break;
			case 4:
				room.exit();break;
			default :
				System.out.println("잘못입력하셨습니다.");
			}
		}

	}

}

