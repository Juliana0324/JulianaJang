alias
- 별칭 혹은 별명 이라는 뜻을 가지고 있습니다
- 복잡한 '명령어'를 짧은 문자열로 변경해서 사용하는 명령어

[사용형식]
alias 문자열='명령어'
ex) alias test='ls -l'
	'll'만써도 사용가능


alias를 사용하면 명령어를 내가 원하는 문자열로 바꿔서 사용할 수 있습니다
위에 명령어를 입력하면 test만 입력해도 ls -l을 사용할 수 있습니다
ex) test /home

alias 제거

unalias 문자열
ex) unalias test

======================================================================

cat
- 파일에 전체 내용을 출력하는 명령어

[사용형식]

cat [확인하고 싶은 파일]
ex) cat /etc/passwd

======================================================

head

- head 명령어는 파일 전체 내용이 아닌 첫 줄부터 10줄까지 출력하는 명령어입니다
ex) head /etc/passwd

tail

- tail 명령어는 파일 전체 내용이 아닌 마지막 줄부터 10줄까지 출력하는 명령어입니다
ex) tail /etc/passwd

head,tail [-줄 수] [확인하고 싶은 파일의 경로]

ex) head -3 /etc/passwd
ex) tail -3 /etc/passwd

=========================================================

nl
- 파일의 전체 내용을 출력하고 각 줄 앞에 줄번호도 같이 출력하는 명령어

[사용형식]

nl [확인하고 싶은 파일의 경로]
ex) nl /etc/passwd

=========================================================================
** 
grep 명령어
- 사용자가 지정한 문자열을 특정 파일에서 찾아서 출력하는 명령어

[사용형태]

grep [찾고 싶은 내용] [확인하고 싶은 파일의 경로]
ex) grep samadal /etc/passwd

grep 명령어는 pipe(|)를 사용해서 다른 명령어와 같이 사용할 수 있습니다


ex) ls -l / | grep home
# ls -l / | grep home
drwxr-xr-x.   3 root root  4096  5월  4 02:31 home

===========================================================================

more 명령어
- 터미널창의 크기를 기준으로 파일의 내용을 출력하는 명령어

ex) more /etc/passwd

===========================================================================

find 명령어
- 주어진 조건을 검색하여 파일이나 디렉터리를 찾는 명령어

[사용형식]
find [찾고 싶은 경로] [옵션] [파일이나 디렉터리 이름]
ex) find / -name passwd

- / 디렉터리 안에서부터 passwd라는 이름을 가지고 있는 파일이나 디렉터리를
  검색하는 명령어입니다
- -name 옵션을 사용해서 내가 찾고 싶은 이름으로 검색할 수 있습니다
- passwd라는 이름을 가진 파일이나 디렉터리만 찾기 때문에 passwd1,1passwd
  이런 형식에 파일이나 디렉터리는 찾을 수 없습니다
- *를 사용하면 passwd를 포함하고 있는 이름도 찾을 수 있습니다
ex) find / -name *passwd*

- type 옵션을 사용해서 디렉터리와 파일을 구별해서 찾을 수 있습니다

find / -name *passwd* -type f
- type f는 파일만 찾겠다는 의미

find / -name *passwd* -type d
- type d는 디렉터리만 찾겠다는 의미

=======================================================================================

cat 명령어를 사용한 파일 수정

cat > [파일명]

# cd /home/samadal/
# cat > a
12345
6789
^C#(ctrl + c)

- >는 파일에 내용을 삽입하는 문법입니다
- 기존에 a라는 파일이 없다면 리눅스가 자동으로 생성합니다
- 파일에 내용을 입력하고 종료하고 싶다면 ctrl + c로 나갈 수 있습니다
- cat > 형식은 기존에 파일에 내용을 모두 지우고 새로운 내용을 삽입하는 형식입니다


cat >> [파일명]
ex) cat >> b

- >>는 파일에 내용을 삽입하는 문법입니다(>와 동일)
- 하지만 >와 다르게 기존내용은 그대로 유지하고 새로운 내용이 기존내용 아래에 추가됩니다


cat [파일명1] [파일명2] > [파일명3]
ex) cat a b > c

- a와b 의 내용을 병합해서 c라는 파일에 삽입하는 문법(파일병합)

===============================================================================

vi 에디터

- 리눅스에서 파일을 편집하는 경우 사용할 수 있는 명령어
- 리눅스는 모든 설정이 전부 파일형식으로 구성되어 있기 때문에
  설정을 변경하고 싶다면 필수적으로 파일 편집기 명령어들을 사용해서
  설정을 변경해야 합니다

[사용형식]

vi [편집하고 싶은 파일]
ex) vi /backup/login.defs

[명령모드]
- ESC를 누르거나 vi에디터로 맨 처음 파일에 들어갔을 경우 적용되는 모드
- 커서를 이동하거나 파일 내용 삭제 및 복사 기능 제공

커서 이동

h : 왼쪽
j : 아래
k : 위
l : 오른쪽



vi/ 
w==> 단어단위 - 다음단어의 첫글자 (특수문자에 걸림)
W ==> 띄어쓰기 기준 다음단어

소문자는 특수문자를 단어로 인식 
대문자는 특수문자를 단어로 인식 x
대문자로 작업하면 shift눌러서 사용

b,B : 이전단어의 첫글자로 이동

e :  다음 단어의 마지막글자로 이동

$ : 글의 마지막 단어로 이동

0 : 현재 커서가 있는 행의 맨 처음으로 이동


보고있는 화면기준
H: high 상단

M: middle 중간 

L: low


G: 문서 가장 아래
gg: 문서 가장 위


내용삭제 : 
x: 커서기준 : 한글자씩 지워짐
u: rollback 

X: 커서의 뒤에 있는 단어 지움
dd: 한줄 삭제

숫자 + dd : 삭제하고자 하는 줄수 (삭제 x : 잘라내기)
p: 위치에 붙여넣기 


줄복사 기능: 
숫자 + yy : 복사하고싶은 줄수 


=================================================
[입력모드]
 - 입력모드는 파일내용을 수정하고 싶은경우 사용하는 형태
 - 입력모드는 반드시 명령 모드에서 접근할 수 있습니다.
 - 입력모드는 i,a,o,O등을 이용해서 진입가능
 - 왼쪽하단에 Insert 가 표시되어있습니다.
 - esc : 수정 나가기

i : 현재 커서 왼쪽
a : 현재 커서 오른쪽
o : 아래로 한줄생성 후 입력
O : 위로 한줄생성 후 입력


=====================================================
[마지막 행모드]

- 실행모드는 vi 에디터 안에서 다양한 기능을 제공하는 모드
- 저장, 종료, 파일 , 열기 등등
- /, ? ,: 를 사용하면 명령모드에서 실행모드로전환
- 다시명령모드로 돌아오려면 esc사용


/ : 특정 문자열을 파일내용 위에서부터 검색
ex :
 /pass => n: next N: 위로 next

? : 특정문자열을 파일내용 아래에서부터 검색
 ?pass => n: 위로 / N: 아래로 next


 : se nu 
=> 줄번호 표시

 : 줄번호
 => 입력한 줄번호가 커서 이동

 


[:를 사용한 치환]
 :s /기존내용/새로운내용
 => 현재커서가 있는 줄에 내용을 치환합니다
 => 커서가 현재 줄에 있어야함

 :줄번호s/기존내용/새로운내용

 :줄번호,줄번호s/기존내용/새로운 내용
 => 지정한 줄번호부터 줄번호까지 내용을 치환

 :%s/기존내용/새로운내용
 -파일전체에서 치환
  
 :! 
- vi를 잠시 중단하고 리눅스 명령어를 실행s
ex) :! ls -l /home

 :.! ls -l /home
 - 리눅스 명령어 실행결과를 현재 편집하고 있는 파일 내용안에 삽입
 - 본문내용을 삭제하고 삽입 하기때문에 사용에 주의
 - . 사용
 

 :q :
 ==> 닫기

 :w 
 ==> 현재 파일명으로 파일저장

 : w 경로/파일
 ==> :w /home/samadal/test

 :wq
 ==> 저장후 닫기

 :q!
 ==> 저장하지않고 나가기 


---------------------------------------------------------
 :e => 지정한 파일 불러오기

 :e! /저장하지 않고 불러오기

 :enew ==> vi 나가지 않고 새 문서파일 생성

 :w >> 파일
 -현재 열려있는 파일의 내용을 지정한 파일 마지막에 삽입

 :r 파일
 -현재 커서 아래에 지정한 파일 내용 삽입

 :r! 명령어 
 -현재 커서 아래에 입력한 명령어의 결과삽입
:r! ls -l /home



창분할 : ctrl + w + n
커서이동 : ctrl +ww




================================================
저장하지 않고 끄냥 껐을때
 rm -rf /backup/.login.defs.swp
로 삭제




vi 실습 
/home/samadal 디렉터리 안에 내용물 전부삭제후 진행
/backup/inittab파일로 작업
vi 실습
/home/samadal 디렉터리 안에 내용물 전부 삭제 후 진행
아래 과정은 vi 에디터 안에서 전부 진행합니다 절대 vi에서 나가지 않습니다
/backup/inittab 파일로 작업합니다

vi /backup/inittab

1. 12라인 밑에 ls -l /home 결과 삽입
2. 파일에 내용 변경(systemctl -> samadal, runlevel -> ITBANK)
3. 5 ~ 12 번째 라인을 2번째 라인 아래에 복사
4. 지금까지 했던 작업을 /test/sam.test 파일로 저장
5. sam.test 파일에 내용을 /test/testfile 에 삽입


복사 ==> v + y 
















